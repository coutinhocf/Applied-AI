Keras exercise
In this exercise you will be creating a Keras model by loading a data set, preprocessing input data, building a Sequential Keras model and compiling the model with a training configuration. Afterwards, you train your model on the training data and evaluate it on the test set. To finish this exercise, you will past the accuracy of your model to the Coursera grader.

This notebook is tested in IBM Watson Studio under python 3.6

Data
For this exercise we will use the Reuters newswire dataset. This dataset consists of 11,228 newswires from the Reuters news agency. Each wire is encoded as a sequence of word indexes, just as in the IMDB data we encountered in lecture 5 of this series. Moreover, each wire is categorised into one of 46 topics, which will serve as our label. This dataset is available through the Keras API.

Goal
We want to create a Multi-layer perceptron (MLP) using Keras which we can train to classify news items into the specified 46 topics.

Instructions
We start by installing and importing everything we need for this exercise:

!pip install --upgrade keras-applications keras-preprocessing setuptools tensorflow==1.14.0 keras==2.2.5
import tensorflow
if not tensorflow.__version__ == '1.14.0':
    print(tensorflow.__version__)
    raise ValueError('please upgrade to TensorFlow 1.14.0, or restart your Kernel (Kernel->Restart & Clear Output)')
​
import keras
if not keras.__version__ == '2.2.5':
    print(keras.__version__)
    raise ValueError('please upgrade to Keras 2.2.5, or restart your Kernel (Kernel->Restart & Clear Output)')
IMPORTANT! => Please restart the kernel by clicking on "Kernel"->"Restart and Clear Outout" and wait until all output disapears. Then your changes are beeing picked up

As you can see, we use Keras' Sequential model with only two types of layers: Dense and Dropout. We also specify a random seed to make our results reproducible. Next, we load the Reuters data set:

import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.utils import to_categorical
seed = 1337
np.random.seed(seed)
from keras.datasets import reuters
​
max_words = 1000
(x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=max_words,
                                                         test_split=0.2,
                                                         seed=seed)
num_classes = np.max(y_train) + 1  # 46 topics
Waiting for a Spark session to start...
Spark Initialization Done! ApplicationId = app-20191223082333-0000
KERNEL_ID = 0b416a98-8d2b-4e5a-9aa6-866fa3ac07c7
Using TensorFlow backend.
Downloading data from https://s3.amazonaws.com/text-datasets/reuters.npz
2113536/2110848 [==============================] - 0s 0us/step
Note that we cap the maximum number of words in a news item to 1000 by specifying the num_words key word. Also, 20% of the data will be test data and we ensure reproducibility by setting our random seed.

Our training features are still simply sequences of indexes and we need to further preprocess them, so that we can plug them into a Dense layer. For this we use a Tokenizer from Keras' text preprocessing module. This tokenizer will take an index sequence and map it to a vector of length max_words=1000. Each of the 1000 vector positions corresponds to one of the words in our newswire corpus. The output of the tokenizer has a 1 at the i-th position of the vector, if the word corresponding to i is in the description of the newswire, and 0 otherwise. Even if this word appears multiple times, we still just put a 1 into our vector, i.e. our tokenizer is binary. We use this tokenizer to transform both train and test features:

from keras.preprocessing.text import Tokenizer
​
tokenizer = Tokenizer(num_words=max_words)
x_train = tokenizer.sequences_to_matrix(x_train, mode='binary')
x_test = tokenizer.sequences_to_matrix(x_test, mode='binary')
1. Exercise part: label encoding
Use to_categorical, as we did in the lectures, to transform both y_train and y_test into one-hot encoded vectors of length num_classes:

y_train = to_categorical(y_train, num_classes)
y_test = to_categorical(y_test, num_classes)
2. Exercise part: model definition
Next, initialise a Keras Sequential model and add three layers to it:

Layer: Add a *Dense* layer with in input_shape=(max_words,), 512 output units and "relu" activation.
Layer: Add a *Dropout* layer with dropout rate of 50%.
Layer: Add a *Dense* layer with num_classes output units and "softmax" activation.
model = Sequential()  # Instantiate sequential model
model.add(Dense(512, activation='relu', input_shape=(max_words,))) # Add first layer. Make sure to specify input shape
model.add(Dropout(0.5)) # Add second layer
model.add(Dense(num_classes, activation='softmax')) # Add third layer
WARNING:tensorflow:From /opt/ibm/conda/miniconda3.6/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
WARNING:tensorflow:From /opt/ibm/conda/miniconda3.6/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.
Instructions for updating:
Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.
3. Exercise part: model compilation
As the next step, we need to compile our Keras model with a training configuration. Compile your model with "categorical_crossentropy" as loss function, "adam" as optimizer and specify "accuracy" as evaluation metric. NOTE: In case you get an error regarding h5py, just restart the kernel and start from scratch

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
#some learners constantly reported 502 errors in Watson Studio. 
#This is due to the limited resources in the free tier and the heavy resource consumption of Keras.
#This is a workaround to limit resource consumption
​
from keras import backend as K
​
K.set_session(K.tf.Session(config=K.tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)))
4. Exercise part: model training and evaluation
Next, define the batch_size for training as 32 and train the model for 5 epochs on x_train and y_train by using the fit method of your model. Then calculate the score for your trained model by running evaluate on x_test and y_test with the same batch size as used in fit.

batch_size = ###_YOUR_CODE_GOES_HERE_###
model.fit(###_YOUR_CODE_GOES_HERE_###)
score = model.evaluate(###_YOUR_CODE_GOES_HERE_###)
batch_size = 32
epochs = 5
model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test)
WARNING:tensorflow:From /opt/ibm/conda/miniconda3.6/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.cast instead.
Train on 8982 samples, validate on 2246 samples
Epoch 1/5
8982/8982 [==============================] - 4s 395us/step - loss: 1.3969 - acc: 0.6885 - val_loss: 0.9784 - val_acc: 0.7765
Epoch 2/5
8982/8982 [==============================] - 3s 291us/step - loss: 0.7714 - acc: 0.8192 - val_loss: 0.8214 - val_acc: 0.8090
Epoch 3/5
8982/8982 [==============================] - 3s 327us/step - loss: 0.5568 - acc: 0.8652 - val_loss: 0.8174 - val_acc: 0.8099
Epoch 4/5
8982/8982 [==============================] - 3s 279us/step - loss: 0.4190 - acc: 0.8926 - val_loss: 0.8370 - val_acc: 0.8010
Epoch 5/5
8982/8982 [==============================] - 2s 275us/step - loss: 0.3466 - acc: 0.9107 - val_loss: 0.8556 - val_acc: 0.7988
2246/2246 [==============================] - 0s 39us/step
If you have done everything as specified, in particular set the random seed as we did above, your test accuracy should be around 80%

score[1]
Congratulations, now it's time to submit your result to the Coursera grader by executing the following cells (Programming Assingment, Week2).

We have to install a little library in order to submit to coursera

!rm -f rklib.py
!wget https://raw.githubusercontent.com/IBM/coursera/master/rklib.py
Please provide your email address and obtain a submission token (secret) on the grader’s submission page in coursera, then execute the cell

from rklib import submit
import json
​
key = "XbAMqtjdEeepUgo7OOVwng"
part = "HCvcp"
email = "silva.cfcs@gmail.com"
token = "kSkoFPLy7cgOD3Jx"
​
​
submit(email, token, 'XbAMqtjdEeepUgo7OOVwng', part, [part], json.dumps(score[1]*100))
